{{ ansible_managed | comment }}
__workspace_venv_status() {
    if [ -n "${VIRTUAL_ENV}" ]; then
        local venv_name=$(basename "${VIRTUAL_ENV}")
        echo -n " (py:${venv_name})"
    fi
}

# Prompt configuration functions
__workspace_git_status() {
    if ! command -v git &>/dev/null || ! git rev-parse --is-inside-work-tree &>/dev/null; then
        return
    fi

    local branch status ahead behind stashed
    branch=$(git rev-parse --abbrev-ref HEAD 2>/dev/null)
    status=$(git status --porcelain 2>/dev/null)

    # Initialize counts
    ahead=$(git rev-list --count '@{upstream}..HEAD' 2>/dev/null || echo "0")
    behind=$(git rev-list --count 'HEAD..@{upstream}' 2>/dev/null || echo "0")
    stashed=$(git stash list 2>/dev/null | wc -l)

    # Build status indicators
    local indicators=""
    [ -n "$status" ] && indicators+="*"
    [ -d ".git/rebase-merge" ] && indicators+="R"
    [ -d ".git/rebase-apply" ] && indicators+="R"
    [ -f ".git/MERGE_HEAD" ] && indicators+="M"
    [ -f ".git/CHERRY_PICK_HEAD" ] && indicators+="C"
    [ "$stashed" -gt 0 ] && indicators+="≡"
    [ "$ahead" -gt 0 ] && indicators+="↑"
    [ "$behind" -gt 0 ] && indicators+="↓"

    # Output branch and status
    if [ -n "$indicators" ]; then
        echo -n " [${branch}|${indicators}]"
    else
        echo -n " [${branch}]"
    fi
}

__workspace_set_prompt() {
    local exit_code=$?
    local c_reset='\[\033[0m\]'
    local c_user='\[\033[38;5;71m\]'
    local c_path='\[\033[38;5;74m\]'
    local c_git='\[\033[38;5;175m\]'
    local c_venv='\[\033[38;5;114m\]'
    local c_prompt='\[\033[38;5;250m\]'

    # First line: user@host:path, venv status, and git status if in repo
    PS1="\n${c_user}\u@\h${c_reset}:${c_path}\w${c_reset}"

    # Add virtual environment status
    local venv_status=$(__workspace_venv_status)
    if [ -n "$venv_status" ]; then
        PS1+="${c_venv}${venv_status}${c_reset}"
    fi

    # Add git status if we're in a repo
    local git_status=$(__workspace_git_status)
    if [ -n "$git_status" ]; then
        PS1+=" ${c_git}${git_status}${c_reset}"
    fi

    # Second line: prompt character
    PS1+="\n${c_prompt}\$${c_reset} "

    # Set terminal title if in xterm
    case "$TERM" in
        xterm*|rxvt*|alacritty|terminator)
            PS1="\[\e]0;\u@\h: \w\a\]$PS1"
            ;;
    esac
}

# Set up prompt - safely check for VSCode terminal
if [ "${TERM_PROGRAM:-}" = "vscode" ]; then
    # Simplified prompt for VSCode terminal
    PS1='\n\u@\h:\w\n\$ '
else
    PROMPT_COMMAND=__workspace_set_prompt
fi
