# Shell configuration - This file is managed by Ansible
# Helper functions for terminal detection and environment setup

# Utility function to detect terminal type safely
is_vscode_terminal() {
    [[ "${TERM_PROGRAM:-}" == "vscode" ]] && return 0
    return 1
}

# Helper function to display workspace features
workspace-help() {
    echo -e "\n=== Workspace Features Overview ===\n"
    echo "Key Combinations:"
    echo "  ALT-T         → Fuzzy file search"
    echo "  CTRL-R        → Search command history"
    echo "  ALT-C         → Directory navigation"
    echo "  CTRL-/        → Toggle preview in FZF"
    echo "  CTRL-Y        → Copy command in history search"
    echo
    echo "Custom Commands:"
    echo "  vf           → Open files with vim + fzf"
    echo "  cf           → Change directory with fzf"
    echo "  kp           → Kill process (interactive)"
    echo "  workspace-help → Show this help message"
    echo
    echo "Git Aliases:"
    echo "  g st         → git status"
    echo "  g co         → git checkout"
    echo "  g br         → git branch"
    echo "  g ci         → git commit"
    echo "  g df         → git diff"
    echo "  g lg         → git log (pretty format)"
    echo
    echo "Enhanced Tools:"
    echo "  cat          → Enhanced with bat"
    echo "  ls           → Color support + directory grouping"
    echo "  fd           → Modern alternative to find"
    echo "  tree         → Directory structure viewer"
    echo "  ncdu         → Disk usage analyzer"
    echo "  htop         → Process viewer"
}

# Basic shell configuration
{% if not workspace_use_custom_prompt | default(true) %}
# Using system default prompt
{% else %}
{{ lookup('template', 'prompt.j2') }}
{% endif %}

# Handle VSCode-specific settings
if is_vscode_terminal; then
    # Unset problematic VSCode shell integration variables
    unset VSCODE_SHELL_INTEGRATION
    # Clear any existing vsc_ prefixed variables that might cause conflicts
    while IFS= read -r var; do
        [[ -n "$var" ]] && unset "$var"
    done < <(printenv | grep -o '^vsc_[^ =]*' || true)
fi

# Display welcome message only in interactive shells and when not in SSH session
if [[ $- == *i* ]] && [[ -z "${SSH_TTY}" ]] && [[ -z "${SSH_CONNECTION}" ]]; then
    echo -e "\nWelcome to your enhanced workspace! Type 'workspace-help' to see available features.\n"
fi

# Enable color support
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto --group-directories-first --sort=version'
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# FZF configuration
export FZF_DEFAULT_COMMAND="fd --type f --follow --hidden --exclude .git"
export FZF_DEFAULT_OPTS="{{ workspace_fzf_integration.default_opts }}"

# Modified CTRL-T to ALT-T for file search (avoiding Terminator conflict)
export FZF_ALT_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_ALT_T_OPTS="
  --preview '{{ workspace_fzf_integration.preview_command }}'
  --bind 'ctrl-/:change-preview-window(down|hidden|)'
  --header 'CTRL-/ to toggle preview'
"

# Bind ALT-T to file search
bind -x '"\et": "fzf-file-widget"'

# Enhanced CTRL-R history search
export FZF_CTRL_R_OPTS="
  --bind 'ctrl-y:execute-silent(echo -n {2..} | xclip -selection clipboard)+abort'
  --bind 'ctrl-/:toggle-preview'
  --preview 'echo {2..} | bat --style=numbers --color=always'
  --preview-window 'down:3:hidden:wrap'
  --color header:italic
  --header 'CTRL-Y to copy command, CTRL-/ to toggle preview'
"

# Enhanced directory navigation
export FZF_ALT_C_COMMAND="fd --type d --follow --hidden --exclude .git"
export FZF_ALT_C_OPTS="
  --preview 'tree -C {}'
"

# Load shell completions and key bindings based on terminal type
if ! is_vscode_terminal; then
    # Standard terminal configuration
    if [ -f /usr/share/bash-completion/bash_completion ]; then
        . /usr/share/bash-completion/bash_completion
    fi

    # FZF configuration only for standard terminals
    if [ -f /usr/share/doc/fzf/examples/completion.bash ]; then
        source /usr/share/doc/fzf/examples/completion.bash
    fi
    if [ -f /usr/share/doc/fzf/examples/key-bindings.bash ]; then
        source /usr/share/doc/fzf/examples/key-bindings.bash
    fi
fi

# Bat configuration
export BAT_THEME="ansi"
export BAT_STYLE="numbers,changes,header"
if command -v batcat >/dev/null; then
    alias bat='batcat'
    alias cat='batcat --paging=never'
elif command -v bat >/dev/null; then
    alias cat='bat --paging=never'
fi

# fd-find configuration
command -v fdfind >/dev/null && alias fd=fdfind  # Debian systems use 'fdfind' name

# Integration between tools
export MANPAGER="sh -c 'col -bx | bat -l man -p'"
export MANROFFOPT="-c"
export EDITOR="vim"

# FZF-enhanced commands
vf() {
    local file
    local preview_cmd
    if command -v batcat >/dev/null; then
        preview_cmd='batcat --style=numbers --color=always'
    elif command -v bat >/dev/null; then
        preview_cmd='bat --style=numbers --color=always'
    else
        preview_cmd='cat'
    fi
    file=$(fd --type f --follow --hidden --exclude .git | fzf --preview "${preview_cmd} {}")
    [ -n "$file" ] && vim "$file"
}

cf() {
    local dir
    dir=$(fd --type d --follow --hidden --exclude .git | fzf --preview 'tree -C {}')
    [ -n "$dir" ] && cd "$dir"
}

kp() { kill -9 "$(ps -ef | fzf --multi | awk '{print $2}')"; }

# Additional useful aliases
alias ll='ls -lah'
alias la='ls -A'
alias l='ls -CF'
alias df='df -h'
alias du='du -h'
alias g='git'

# Alert alias for long running commands
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'
